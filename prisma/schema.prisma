// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password String?

  isAdmin       Boolean        @default(false) // Add this field
  
  // Relations
  orders  Order[] // A user can have multiple orders
  cars    Car[]   // A user can own multiple cars

   // Fix: Add relation to PasswordResetToken
  passwordResetTokens PasswordResetToken[] @relation("UserPasswordResetTokens") // Ensure this line is present
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])

  
 
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model Car{
  id          String   @id @default(cuid()) @map("_id")
  slug        String   @unique
  title       String
  desc        String
  imgUrl      String
  price       Float
  passenger   Int
  status      String   @default("available") // available, booked, sold, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationship with User model
  userEmail      String
  user        User     @relation(fields: [userEmail], references: [email])

  // Relation with Order
  orders      Order[]
}


model Order {
  id          String   @id @default(cuid()) @map("_id")
  imgUrl      String
  title       String
  desc        String
  price       Float
  phoneNumber String
  startDate   DateTime // New field for start date
  endDate     DateTime // New field for end date
  pickupTime  String
  persons     Int
  comment     String
  pickupLocation Json  // Store as structured data
  destinationLocation Json  // Store as structured data
  createdAt   DateTime @default(now())

  // Relationship with User model
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email])

  // Relationship with Car model
  carSlug      String  
  car          Car     @relation(fields: [carSlug], references: [slug])
}


model PasswordResetToken {
  id        String   @id @default(cuid()) @map("_id") 
  userId    String  @unique  // âœ… Make userId unique
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserPasswordResetTokens") // Add the relation name here
}